// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kcasamento/sqs-consumer-go/internal/service (interfaces: Sqs)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=mocks/sqs_mock.go -package=mocks . Sqs
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	gomock "go.uber.org/mock/gomock"
)

// MockSqs is a mock of Sqs interface.
type MockSqs struct {
	ctrl     *gomock.Controller
	recorder *MockSqsMockRecorder
}

// MockSqsMockRecorder is the mock recorder for MockSqs.
type MockSqsMockRecorder struct {
	mock *MockSqs
}

// NewMockSqs creates a new mock instance.
func NewMockSqs(ctrl *gomock.Controller) *MockSqs {
	mock := &MockSqs{ctrl: ctrl}
	mock.recorder = &MockSqsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqs) EXPECT() *MockSqsMockRecorder {
	return m.recorder
}

// ChangeMessageVisibility mocks base method.
func (m *MockSqs) ChangeMessageVisibility(arg0 context.Context, arg1 *sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMessageVisibility", arg0, arg1)
	ret0, _ := ret[0].(*sqs.ChangeMessageVisibilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMessageVisibility indicates an expected call of ChangeMessageVisibility.
func (mr *MockSqsMockRecorder) ChangeMessageVisibility(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMessageVisibility", reflect.TypeOf((*MockSqs)(nil).ChangeMessageVisibility), arg0, arg1)
}

// DeleteMessageBatch mocks base method.
func (m *MockSqs) DeleteMessageBatch(arg0 context.Context, arg1 *sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageBatch", arg0, arg1)
	ret0, _ := ret[0].(*sqs.DeleteMessageBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessageBatch indicates an expected call of DeleteMessageBatch.
func (mr *MockSqsMockRecorder) DeleteMessageBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageBatch", reflect.TypeOf((*MockSqs)(nil).DeleteMessageBatch), arg0, arg1)
}

// ReceiveMessage mocks base method.
func (m *MockSqs) ReceiveMessage(arg0 context.Context, arg1 *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", arg0, arg1)
	ret0, _ := ret[0].(*sqs.ReceiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockSqsMockRecorder) ReceiveMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockSqs)(nil).ReceiveMessage), arg0, arg1)
}
